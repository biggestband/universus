[gd_resource type="VisualShader" load_steps=36 format=3 uid="uid://dy3uaex154icp"]

[ext_resource type="Texture2D" uid="uid://vr1n7q5kxeyx" path="res://assets/3D/Textures/Noises/T_PlinkoMachineMaps_PegMask.png" id="1_7gcry"]
[ext_resource type="Texture2D" uid="uid://ip7ol2ypklaa" path="res://assets/3D/Textures/Noises/T_Envrionment_grass.png" id="1_mtek0"]
[ext_resource type="Texture2D" uid="uid://setvdx1euye7" path="res://assets/3D/Textures/Noises/T_Envrionment_brick.png" id="2_mtek0"]

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_nurp7"]
texture = ExtResource("1_mtek0")

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_v5na7"]
input_name = "uv2"

[sub_resource type="VisualShaderNodeSwitch" id="VisualShaderNodeSwitch_taloq"]
default_input_values = [0, false, 1, Quaternion(1, 1, 1, 1), 2, Quaternion(0, 0, 0, 0)]
op_type = 5

[sub_resource type="VisualShaderNodeColorParameter" id="VisualShaderNodeColorParameter_7um07"]
parameter_name = "DefaultColour"
default_value_enabled = true
default_value = Color(0, 0, 0, 1)

[sub_resource type="VisualShaderNodeBooleanParameter" id="VisualShaderNodeBooleanParameter_kxnej"]
parameter_name = "Albedo"
default_value_enabled = true

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_b2ui6"]
texture = ExtResource("1_7gcry")

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_lk5nm"]
input_name = "uv"

[sub_resource type="CompressedTexture2D" id="CompressedTexture2D_8k6jc"]
load_path = "res://.godot/imported/T_UniVersusColorPalette_basecolor.png-000ac40a8d33a9b25f8ec224d00d0e19.s3tc.ctex"

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_1wd4u"]
source = 5
texture = SubResource("CompressedTexture2D_8k6jc")
texture_type = 1

[sub_resource type="VisualShaderNodeFloatFunc" id="VisualShaderNodeFloatFunc_n4akn"]
function = 31

[sub_resource type="VisualShaderNodeVectorOp" id="VisualShaderNodeVectorOp_m0yff"]
operator = 2

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_b4n3s"]
input_name = "uv"

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_jf2bf"]
texture = ExtResource("1_7gcry")

[sub_resource type="VisualShaderNodeVectorOp" id="VisualShaderNodeVectorOp_rb8w5"]

[sub_resource type="VisualShaderNodeVectorOp" id="VisualShaderNodeVectorOp_41w5q"]

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_emw6l"]
texture = ExtResource("2_mtek0")

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_s3ltf"]
input_name = "uv2"

[sub_resource type="VisualShaderNodeVectorOp" id="VisualShaderNodeVectorOp_hd71s"]
operator = 2

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_nurp7"]
input_name = "uv"

[sub_resource type="VisualShaderNodeTexture2DParameter" id="VisualShaderNodeTexture2DParameter_7gcry"]
parameter_name = "Texture2DParameter"

[sub_resource type="VisualShaderNodeFresnel" id="VisualShaderNodeFresnel_tb3e1"]
default_input_values = [2, false, 3, 10.0]

[sub_resource type="VisualShaderNodeStep" id="VisualShaderNodeStep_1wd4u"]
default_input_values = [0, 1.0, 1, 0.1]

[sub_resource type="VisualShaderNodeVectorOp" id="VisualShaderNodeVectorOp_nurp7"]
operator = 2

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_8k6jc"]
input_name = "color"

[sub_resource type="VisualShaderNodeVectorOp" id="VisualShaderNodeVectorOp_tb3e1"]
operator = 2

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_ahy8s"]
size = Vector2(940, 760)
expression = "	// basic light
	float base_light = clamp(dot(NORMAL, LIGHT), 0.0, 1.0) * ATTENUATION;

	// all threshholds
	bool shadow = base_light >= shadow_threshold;
	bool specular = base_light >= specular_threshold;
	bool highlight = base_light >= highlight_threshold;

	// shadow output
	DIFFUSE_LIGHT = vec3(shadow ? 1.0 : 0.0);

	// specular highlights
	vec3 color = LIGHT_COLOR;

	// only colored check
	if (only_colored_specular == true) {
		float color_avarage = (color.x + color.y + color.z) / 3.0; // greyscale
		bool is_colored = color_avarage <= 2.0; // checks if it's colored based on greyscale
		color *= vec3(is_colored ? 1.0 : 0.0); // to vec3 (color)
	}

	// get colored specular
	vec3 specular_vec_color = color * vec3(specular ? 1.0 : 0.0) * vec3(specular_strenght);
	// specular + highlights
	vec3 specular_out = specular_vec_color + vec3(highlight ? 1.0 : 0.0);
	// specular + shadow texture only on shadow
	specular_out += texture(shadow_texture, UV).xyz * vec3(shadow ? 0.0 : 1.0);

	// specular and highlights output
	SPECULAR_LIGHT = specular_out;
"

[sub_resource type="VisualShaderNodeGlobalExpression" id="VisualShaderNodeGlobalExpression_v5na7"]
size = Vector2(820, 320)
expression = "uniform sampler2D shadow_texture  : source_color;
uniform float shadow_threshold    : hint_range(0.0, 1.0) = 0.30;
uniform float specular_threshold  : hint_range(0.0, 1.0) = 0.70;
uniform float specular_strenght   : hint_range(0.0, 0.5) = 0.50;
uniform float highlight_threshold : hint_range(0.0, 1.0) = 1.00;
uniform bool only_colored_specular = true;"

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_taloq"]
input_name = "normal"

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_7um07"]
input_name = "light"

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_kxnej"]
input_name = "attenuation"

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_a4g6m"]
input_name = "uv"

[sub_resource type="VisualShaderNodeColorParameter" id="VisualShaderNodeColorParameter_tb3e1"]
parameter_name = "SpecularColor"
default_value_enabled = true

[resource]
code = "shader_type spatial;
render_mode blend_mix, depth_draw_opaque, cull_back, diffuse_lambert, specular_schlick_ggx;

uniform bool Albedo = false;
uniform sampler2D Texture2DParameter;
uniform vec4 DefaultColour : source_color = vec4(0.000000, 0.000000, 0.000000, 1.000000);
uniform sampler2D tex_frg_10;
uniform sampler2D tex_frg_17;
uniform sampler2D tex_frg_27;
uniform sampler2D tex_frg_23;
uniform vec4 SpecularColor : source_color = vec4(1.000000, 1.000000, 1.000000, 1.000000);


// GlobalExpression:0
	uniform sampler2D shadow_texture  : source_color;
	uniform float shadow_threshold    : hint_range(0.0, 1.0) = 0.30;
	uniform float specular_threshold  : hint_range(0.0, 1.0) = 0.70;
	uniform float specular_strenght   : hint_range(0.0, 0.5) = 0.50;
	uniform float highlight_threshold : hint_range(0.0, 1.0) = 1.00;
	uniform bool only_colored_specular = true;

void fragment() {
// BooleanParameter:16
	bool n_out16p0 = Albedo;


// Input:3
	vec2 n_out3p0 = UV;


	vec4 n_out2p0;
// Texture2D:2
	n_out2p0 = texture(Texture2DParameter, n_out3p0);


// ColorParameter:15
	vec4 n_out15p0 = DefaultColour;


// Input:12
	vec2 n_out12p0 = UV2;


// Texture2D:10
	vec4 n_out10p0 = texture(tex_frg_10, n_out12p0);


// Input:18
	vec2 n_out18p0 = UV;


// Texture2D:17
	vec4 n_out17p0 = texture(tex_frg_17, n_out18p0);


// FloatFunc:20
	float n_out20p0 = 1.0 - n_out17p0.x;


// VectorOp:21
	vec3 n_out21p0 = vec3(n_out10p0.xyz) * vec3(n_out20p0);


// VectorOp:25
	vec3 n_out25p0 = vec3(n_out15p0.xyz) + n_out21p0;


// Input:28
	vec2 n_out28p0 = UV2;


// Texture2D:27
	vec4 n_out27p0 = texture(tex_frg_27, n_out28p0);


// Input:22
	vec2 n_out22p0 = UV;


// Texture2D:23
	vec4 n_out23p0 = texture(tex_frg_23, n_out22p0);


// VectorOp:29
	vec3 n_out29p0 = vec3(n_out27p0.xyz) * vec3(n_out23p0.xyz);


// VectorOp:26
	vec3 n_out26p0 = n_out25p0 + n_out29p0;


// Input:8
	vec4 n_out8p0 = COLOR;


// VectorOp:9
	vec3 n_out9p0 = n_out26p0 * vec3(n_out8p0.xyz);


	vec4 n_out14p0;
// Switch:14
	n_out14p0 = mix(vec4(n_out9p0, 0.0), n_out2p0, float(n_out16p0));


// Output:0
	ALBEDO = vec3(n_out14p0.xyz);


}

void light() {
// Input:4
	vec3 n_out4p0 = NORMAL;


// Input:5
	vec3 n_out5p0 = LIGHT;


// Input:6
	float n_out6p0 = ATTENUATION;


// ColorParameter:9
	vec4 n_out9p0 = SpecularColor;


// Input:8
	vec2 n_out8p0 = UV;


	vec3 n_out2p0;
	vec3 n_out2p1;
// Expression:2
	n_out2p0 = vec3(0.0, 0.0, 0.0);
	n_out2p1 = vec3(0.0, 0.0, 0.0);
	{
			// basic light
			float base_light = clamp(dot(n_out4p0, n_out5p0), 0.0, 1.0) * n_out6p0;
		
			// all threshholds
			bool shadow = base_light >= shadow_threshold;
			bool specular = base_light >= specular_threshold;
			bool highlight = base_light >= highlight_threshold;
		
			// shadow output
			n_out2p0 = vec3(shadow ? 1.0 : 0.0);
		
			// specular highlights
			vec3 color = vec3(n_out9p0.xyz);
		
			// only colored check
			if (only_colored_specular == true) {
				float color_avarage = (color.x + color.y + color.z) / 3.0; // greyscale
				bool is_colored = color_avarage <= 2.0; // checks if it's colored based on greyscale
				color *= vec3(is_colored ? 1.0 : 0.0); // to vec3 (color)
			}
		
			// get colored specular
			vec3 specular_vec_color = color * vec3(specular ? 1.0 : 0.0) * vec3(specular_strenght);
			// specular + highlights
			vec3 specular_out = specular_vec_color + vec3(highlight ? 1.0 : 0.0);
			// specular + shadow texture only on shadow
			specular_out += texture(shadow_texture, n_out8p0).xyz * vec3(shadow ? 0.0 : 1.0);
		
			// specular and highlights output
			n_out2p1 = specular_out;
		
	}


// Output:0
	DIFFUSE_LIGHT = n_out2p0;
	SPECULAR_LIGHT = n_out2p1;


}
"
nodes/fragment/0/position = Vector2(860, 140)
nodes/fragment/2/node = SubResource("VisualShaderNodeTexture_1wd4u")
nodes/fragment/2/position = Vector2(-1700, -240)
nodes/fragment/3/node = SubResource("VisualShaderNodeInput_nurp7")
nodes/fragment/3/position = Vector2(-2140, -120)
nodes/fragment/4/node = SubResource("VisualShaderNodeFresnel_tb3e1")
nodes/fragment/4/position = Vector2(20, 420)
nodes/fragment/6/node = SubResource("VisualShaderNodeStep_1wd4u")
nodes/fragment/6/position = Vector2(320, 340)
nodes/fragment/7/node = SubResource("VisualShaderNodeVectorOp_nurp7")
nodes/fragment/7/position = Vector2(600, 240)
nodes/fragment/8/node = SubResource("VisualShaderNodeInput_8k6jc")
nodes/fragment/8/position = Vector2(-520, 440)
nodes/fragment/9/node = SubResource("VisualShaderNodeVectorOp_tb3e1")
nodes/fragment/9/position = Vector2(-120, 140)
nodes/fragment/10/node = SubResource("VisualShaderNodeTexture_nurp7")
nodes/fragment/10/position = Vector2(-1720, 480)
nodes/fragment/12/node = SubResource("VisualShaderNodeInput_v5na7")
nodes/fragment/12/position = Vector2(-2300, 560)
nodes/fragment/14/node = SubResource("VisualShaderNodeSwitch_taloq")
nodes/fragment/14/position = Vector2(200, -20)
nodes/fragment/15/node = SubResource("VisualShaderNodeColorParameter_7um07")
nodes/fragment/15/position = Vector2(-1320, 160)
nodes/fragment/16/node = SubResource("VisualShaderNodeBooleanParameter_kxnej")
nodes/fragment/16/position = Vector2(-1380, -400)
nodes/fragment/17/node = SubResource("VisualShaderNodeTexture_b2ui6")
nodes/fragment/17/position = Vector2(-1920, 860)
nodes/fragment/18/node = SubResource("VisualShaderNodeInput_lk5nm")
nodes/fragment/18/position = Vector2(-2300, 1180)
nodes/fragment/20/node = SubResource("VisualShaderNodeFloatFunc_n4akn")
nodes/fragment/20/position = Vector2(-1600, 920)
nodes/fragment/21/node = SubResource("VisualShaderNodeVectorOp_m0yff")
nodes/fragment/21/position = Vector2(-1340, 460)
nodes/fragment/22/node = SubResource("VisualShaderNodeInput_b4n3s")
nodes/fragment/22/position = Vector2(-1840, 1640)
nodes/fragment/23/node = SubResource("VisualShaderNodeTexture_jf2bf")
nodes/fragment/23/position = Vector2(-1400, 1500)
nodes/fragment/25/node = SubResource("VisualShaderNodeVectorOp_rb8w5")
nodes/fragment/25/position = Vector2(-880, 240)
nodes/fragment/26/node = SubResource("VisualShaderNodeVectorOp_41w5q")
nodes/fragment/26/position = Vector2(-460, 140)
nodes/fragment/27/node = SubResource("VisualShaderNodeTexture_emw6l")
nodes/fragment/27/position = Vector2(-1380, 1100)
nodes/fragment/28/node = SubResource("VisualShaderNodeInput_s3ltf")
nodes/fragment/28/position = Vector2(-1720, 1240)
nodes/fragment/29/node = SubResource("VisualShaderNodeVectorOp_hd71s")
nodes/fragment/29/position = Vector2(-1120, 1200)
nodes/fragment/30/node = SubResource("VisualShaderNodeTexture2DParameter_7gcry")
nodes/fragment/30/position = Vector2(-2140, 60)
nodes/fragment/connections = PackedInt32Array(3, 0, 2, 0, 4, 0, 6, 0, 6, 0, 7, 1, 8, 0, 9, 1, 12, 0, 10, 0, 2, 0, 14, 1, 16, 0, 14, 0, 18, 0, 17, 0, 17, 0, 20, 0, 10, 0, 21, 0, 22, 0, 23, 0, 15, 0, 25, 0, 9, 0, 14, 2, 14, 0, 7, 0, 28, 0, 27, 0, 27, 0, 29, 0, 23, 0, 29, 1, 20, 0, 21, 1, 21, 0, 25, 1, 25, 0, 26, 0, 29, 0, 26, 1, 26, 0, 9, 0, 14, 0, 0, 0, 30, 0, 2, 2)
nodes/light/0/position = Vector2(400, 160)
nodes/light/2/node = SubResource("VisualShaderNodeExpression_ahy8s")
nodes/light/2/position = Vector2(-820, -120)
nodes/light/2/size = Vector2(940, 760)
nodes/light/2/input_ports = "0,4,NORMAL;1,4,LIGHT;2,0,ATTENUATION;3,4,LIGHT_COLOR;4,3,UV;"
nodes/light/2/output_ports = "0,4,DIFFUSE_LIGHT;1,4,SPECULAR_LIGHT;"
nodes/light/2/expression = "	// basic light
	float base_light = clamp(dot(NORMAL, LIGHT), 0.0, 1.0) * ATTENUATION;

	// all threshholds
	bool shadow = base_light >= shadow_threshold;
	bool specular = base_light >= specular_threshold;
	bool highlight = base_light >= highlight_threshold;

	// shadow output
	DIFFUSE_LIGHT = vec3(shadow ? 1.0 : 0.0);

	// specular highlights
	vec3 color = LIGHT_COLOR;

	// only colored check
	if (only_colored_specular == true) {
		float color_avarage = (color.x + color.y + color.z) / 3.0; // greyscale
		bool is_colored = color_avarage <= 2.0; // checks if it's colored based on greyscale
		color *= vec3(is_colored ? 1.0 : 0.0); // to vec3 (color)
	}

	// get colored specular
	vec3 specular_vec_color = color * vec3(specular ? 1.0 : 0.0) * vec3(specular_strenght);
	// specular + highlights
	vec3 specular_out = specular_vec_color + vec3(highlight ? 1.0 : 0.0);
	// specular + shadow texture only on shadow
	specular_out += texture(shadow_texture, UV).xyz * vec3(shadow ? 0.0 : 1.0);

	// specular and highlights output
	SPECULAR_LIGHT = specular_out;
"
nodes/light/3/node = SubResource("VisualShaderNodeGlobalExpression_v5na7")
nodes/light/3/position = Vector2(-780, -540)
nodes/light/3/size = Vector2(820, 320)
nodes/light/3/input_ports = ""
nodes/light/3/output_ports = ""
nodes/light/3/expression = "uniform sampler2D shadow_texture  : source_color;
uniform float shadow_threshold    : hint_range(0.0, 1.0) = 0.30;
uniform float specular_threshold  : hint_range(0.0, 1.0) = 0.70;
uniform float specular_strenght   : hint_range(0.0, 0.5) = 0.50;
uniform float highlight_threshold : hint_range(0.0, 1.0) = 1.00;
uniform bool only_colored_specular = true;"
nodes/light/4/node = SubResource("VisualShaderNodeInput_taloq")
nodes/light/4/position = Vector2(-1220, -80)
nodes/light/5/node = SubResource("VisualShaderNodeInput_7um07")
nodes/light/5/position = Vector2(-1220, 20)
nodes/light/6/node = SubResource("VisualShaderNodeInput_kxnej")
nodes/light/6/position = Vector2(-1200, 120)
nodes/light/8/node = SubResource("VisualShaderNodeInput_a4g6m")
nodes/light/8/position = Vector2(-1220, 520)
nodes/light/9/node = SubResource("VisualShaderNodeColorParameter_tb3e1")
nodes/light/9/position = Vector2(-1220, 240)
nodes/light/connections = PackedInt32Array(4, 0, 2, 0, 5, 0, 2, 1, 6, 0, 2, 2, 8, 0, 2, 4, 9, 0, 2, 3, 2, 0, 0, 0, 2, 1, 0, 1)
