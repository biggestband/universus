[gd_resource type="VisualShader" load_steps=14 format=3 uid="uid://dy3uaex154icp"]

[ext_resource type="Texture2D" uid="uid://bhxuil1ibce85" path="res://Assets/3D/Textures/T_UniVersusColorPalette_basecolor.png" id="1_bdbns"]

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_1wd4u"]
texture = ExtResource("1_bdbns")
texture_type = 1

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_nurp7"]
input_name = "uv"

[sub_resource type="VisualShaderNodeFresnel" id="VisualShaderNodeFresnel_tb3e1"]
default_input_values = [2, false, 3, 10.0]

[sub_resource type="VisualShaderNodeStep" id="VisualShaderNodeStep_1wd4u"]
default_input_values = [0, 1.0, 1, 0.1]

[sub_resource type="VisualShaderNodeVectorOp" id="VisualShaderNodeVectorOp_nurp7"]
operator = 2

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_ahy8s"]
size = Vector2(940, 760)
expression = "	// basic light
	float base_light = clamp(dot(NORMAL, LIGHT), 0.0, 1.0) * ATTENUATION;

	// all threshholds
	bool shadow = base_light >= shadow_threshold;
	bool specular = base_light >= specular_threshold;
	bool highlight = base_light >= highlight_threshold;

	// shadow output
	DIFFUSE_LIGHT = vec3(shadow ? 1.0 : 0.0);

	// specular highlights
	vec3 color = LIGHT_COLOR;

	// only colored check
	if (only_colored_specular == true) {
		float color_avarage = (color.x + color.y + color.z) / 3.0; // greyscale
		bool is_colored = color_avarage <= 2.0; // checks if it's colored based on greyscale
		color *= vec3(is_colored ? 1.0 : 0.0); // to vec3 (color)
	}

	// get colored specular
	vec3 specular_vec_color = color * vec3(specular ? 1.0 : 0.0) * vec3(specular_strenght);
	// specular + highlights
	vec3 specular_out = specular_vec_color + vec3(highlight ? 1.0 : 0.0);
	// specular + shadow texture only on shadow
	specular_out += texture(shadow_texture, UV).xyz * vec3(shadow ? 0.0 : 1.0);

	// specular and highlights output
	SPECULAR_LIGHT = specular_out;
"

[sub_resource type="VisualShaderNodeGlobalExpression" id="VisualShaderNodeGlobalExpression_v5na7"]
size = Vector2(820, 320)
expression = "uniform sampler2D albedo_texture  : source_color;
uniform sampler2D shadow_texture  : source_color;
uniform float shadow_threshold    : hint_range(0.0, 1.0) = 0.30;
uniform float specular_threshold  : hint_range(0.0, 1.0) = 0.70;
uniform float specular_strenght   : hint_range(0.0, 0.5) = 0.50;
uniform float highlight_threshold : hint_range(0.0, 1.0) = 1.00;
uniform bool only_colored_specular = true;"

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_taloq"]
input_name = "normal"

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_7um07"]
input_name = "light"

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_kxnej"]
input_name = "attenuation"

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_a4g6m"]
input_name = "uv"

[sub_resource type="VisualShaderNodeColorParameter" id="VisualShaderNodeColorParameter_tb3e1"]
parameter_name = "SpecularColor"
default_value_enabled = true

[resource]
code = "shader_type spatial;
render_mode blend_mix, depth_draw_opaque, cull_back, diffuse_lambert, specular_schlick_ggx;

uniform sampler2D tex_frg_2 : source_color;
uniform vec4 SpecularColor : source_color = vec4(1.000000, 1.000000, 1.000000, 1.000000);


// GlobalExpression:0
	uniform sampler2D albedo_texture  : source_color;
	uniform sampler2D shadow_texture  : source_color;
	uniform float shadow_threshold    : hint_range(0.0, 1.0) = 0.30;
	uniform float specular_threshold  : hint_range(0.0, 1.0) = 0.70;
	uniform float specular_strenght   : hint_range(0.0, 0.5) = 0.50;
	uniform float highlight_threshold : hint_range(0.0, 1.0) = 1.00;
	uniform bool only_colored_specular = true;

void fragment() {
// Input:3
	vec2 n_out3p0 = UV;


// Texture2D:2
	vec4 n_out2p0 = texture(tex_frg_2, n_out3p0);


// Fresnel:4
	float n_in4p3 = 10.00000;
	float n_out4p0 = pow(1.0 - clamp(dot(NORMAL, VIEW), 0.0, 1.0), n_in4p3);


// Step:6
	float n_in6p1 = 0.10000;
	float n_out6p0 = step(n_out4p0, n_in6p1);


// VectorOp:7
	vec3 n_out7p0 = vec3(n_out2p0.xyz) * vec3(n_out6p0);


// Output:0
	ALBEDO = n_out7p0;


}

void light() {
// Input:4
	vec3 n_out4p0 = NORMAL;


// Input:5
	vec3 n_out5p0 = LIGHT;


// Input:6
	float n_out6p0 = ATTENUATION;


// ColorParameter:9
	vec4 n_out9p0 = SpecularColor;


// Input:8
	vec2 n_out8p0 = UV;


	vec3 n_out2p0;
	vec3 n_out2p1;
// Expression:2
	n_out2p0 = vec3(0.0, 0.0, 0.0);
	n_out2p1 = vec3(0.0, 0.0, 0.0);
	{
			// basic light
			float base_light = clamp(dot(n_out4p0, n_out5p0), 0.0, 1.0) * n_out6p0;
		
			// all threshholds
			bool shadow = base_light >= shadow_threshold;
			bool specular = base_light >= specular_threshold;
			bool highlight = base_light >= highlight_threshold;
		
			// shadow output
			n_out2p0 = vec3(shadow ? 1.0 : 0.0);
		
			// specular highlights
			vec3 color = vec3(n_out9p0.xyz);
		
			// only colored check
			if (only_colored_specular == true) {
				float color_avarage = (color.x + color.y + color.z) / 3.0; // greyscale
				bool is_colored = color_avarage <= 2.0; // checks if it's colored based on greyscale
				color *= vec3(is_colored ? 1.0 : 0.0); // to vec3 (color)
			}
		
			// get colored specular
			vec3 specular_vec_color = color * vec3(specular ? 1.0 : 0.0) * vec3(specular_strenght);
			// specular + highlights
			vec3 specular_out = specular_vec_color + vec3(highlight ? 1.0 : 0.0);
			// specular + shadow texture only on shadow
			specular_out += texture(shadow_texture, n_out8p0).xyz * vec3(shadow ? 0.0 : 1.0);
		
			// specular and highlights output
			n_out2p1 = specular_out;
		
	}


// Output:0
	DIFFUSE_LIGHT = n_out2p0;
	SPECULAR_LIGHT = n_out2p1;


}
"
nodes/fragment/2/node = SubResource("VisualShaderNodeTexture_1wd4u")
nodes/fragment/2/position = Vector2(-560, 20)
nodes/fragment/3/node = SubResource("VisualShaderNodeInput_nurp7")
nodes/fragment/3/position = Vector2(-1220, 60)
nodes/fragment/4/node = SubResource("VisualShaderNodeFresnel_tb3e1")
nodes/fragment/4/position = Vector2(-600, 420)
nodes/fragment/6/node = SubResource("VisualShaderNodeStep_1wd4u")
nodes/fragment/6/position = Vector2(-300, 340)
nodes/fragment/7/node = SubResource("VisualShaderNodeVectorOp_nurp7")
nodes/fragment/7/position = Vector2(-40, 60)
nodes/fragment/connections = PackedInt32Array(3, 0, 2, 0, 4, 0, 6, 0, 2, 0, 7, 0, 6, 0, 7, 1, 7, 0, 0, 0)
nodes/light/0/position = Vector2(400, 160)
nodes/light/2/node = SubResource("VisualShaderNodeExpression_ahy8s")
nodes/light/2/position = Vector2(-820, -120)
nodes/light/2/size = Vector2(940, 760)
nodes/light/2/input_ports = "0,4,NORMAL;1,4,LIGHT;2,0,ATTENUATION;3,4,LIGHT_COLOR;4,3,UV;"
nodes/light/2/output_ports = "0,4,DIFFUSE_LIGHT;1,4,SPECULAR_LIGHT;"
nodes/light/2/expression = "	// basic light
	float base_light = clamp(dot(NORMAL, LIGHT), 0.0, 1.0) * ATTENUATION;

	// all threshholds
	bool shadow = base_light >= shadow_threshold;
	bool specular = base_light >= specular_threshold;
	bool highlight = base_light >= highlight_threshold;

	// shadow output
	DIFFUSE_LIGHT = vec3(shadow ? 1.0 : 0.0);

	// specular highlights
	vec3 color = LIGHT_COLOR;

	// only colored check
	if (only_colored_specular == true) {
		float color_avarage = (color.x + color.y + color.z) / 3.0; // greyscale
		bool is_colored = color_avarage <= 2.0; // checks if it's colored based on greyscale
		color *= vec3(is_colored ? 1.0 : 0.0); // to vec3 (color)
	}

	// get colored specular
	vec3 specular_vec_color = color * vec3(specular ? 1.0 : 0.0) * vec3(specular_strenght);
	// specular + highlights
	vec3 specular_out = specular_vec_color + vec3(highlight ? 1.0 : 0.0);
	// specular + shadow texture only on shadow
	specular_out += texture(shadow_texture, UV).xyz * vec3(shadow ? 0.0 : 1.0);

	// specular and highlights output
	SPECULAR_LIGHT = specular_out;
"
nodes/light/3/node = SubResource("VisualShaderNodeGlobalExpression_v5na7")
nodes/light/3/position = Vector2(-780, -540)
nodes/light/3/size = Vector2(820, 320)
nodes/light/3/input_ports = ""
nodes/light/3/output_ports = ""
nodes/light/3/expression = "uniform sampler2D albedo_texture  : source_color;
uniform sampler2D shadow_texture  : source_color;
uniform float shadow_threshold    : hint_range(0.0, 1.0) = 0.30;
uniform float specular_threshold  : hint_range(0.0, 1.0) = 0.70;
uniform float specular_strenght   : hint_range(0.0, 0.5) = 0.50;
uniform float highlight_threshold : hint_range(0.0, 1.0) = 1.00;
uniform bool only_colored_specular = true;"
nodes/light/4/node = SubResource("VisualShaderNodeInput_taloq")
nodes/light/4/position = Vector2(-1220, -80)
nodes/light/5/node = SubResource("VisualShaderNodeInput_7um07")
nodes/light/5/position = Vector2(-1220, 20)
nodes/light/6/node = SubResource("VisualShaderNodeInput_kxnej")
nodes/light/6/position = Vector2(-1200, 120)
nodes/light/8/node = SubResource("VisualShaderNodeInput_a4g6m")
nodes/light/8/position = Vector2(-1220, 520)
nodes/light/9/node = SubResource("VisualShaderNodeColorParameter_tb3e1")
nodes/light/9/position = Vector2(-1220, 240)
nodes/light/connections = PackedInt32Array(4, 0, 2, 0, 5, 0, 2, 1, 6, 0, 2, 2, 2, 0, 0, 0, 2, 1, 0, 1, 8, 0, 2, 4, 9, 0, 2, 3)
